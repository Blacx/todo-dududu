{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","inputList","listData","handlerForm","e","preventDefault","_this","setState","list","push","id","length","name","localStorage","setItem","JSON","stringify","handleInput","target","value","console","log","handleMultipleInput","Object","defineProperty","handleDelete","idx","map","item","indexOf","splice","check","getItem","this","parse","_this2","react_default","a","createElement","className","onSubmit","autoComplete","onChange","type","key","title","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAyGeA,oNApGbC,MAAQ,CACNC,UAAW,UACXC,SAAW,MAUbC,YAAc,SAACC,GACbA,EAAEC,iBAEFC,EAAKC,SAAS,CAACN,UAAW,KAE1B,IAAIO,EAAOF,EAAKN,MAAME,SACtBM,EAAKC,KAAK,CACRC,GAAIF,EAAKG,OAAS,EAClBC,KAAMN,EAAKN,MAAMC,YAGnBK,EAAKC,SAAS,CAACL,SAAUM,IAEzBK,aAAaC,QAAQ,OAAQC,KAAKC,UAAUV,EAAKN,MAAME,cASzDe,YAAc,SAAAb,GACZE,EAAKC,SAAS,CAACN,UAAWG,EAAEc,OAAOC,QACnCC,QAAQC,IAAIjB,EAAEc,OAAOC,UAGvBG,oBAAsB,SAAClB,GACrBE,EAAKC,SAALgB,OAAAC,EAAA,EAAAD,CAAA,GAAiBnB,EAAEc,OAAON,KAAQR,EAAEc,OAAOC,WAG7CM,aAAe,SAACrB,EAAGM,GACjB,IAAIF,EAAOF,EAAKN,MAAME,SAClBwB,EAAMlB,EAAKmB,IAAI,SAACC,GAClB,OAAOA,EAAKlB,KACXmB,QAAQnB,GACXF,EAAKsB,OAAOJ,EAAK,GACjBpB,EAAKC,SAAS,CAACL,SAAUM,IACzBK,aAAaC,QAAQ,OAAQC,KAAKC,UAAUV,EAAKN,MAAME,+FA5CvD,IAAI6B,EAAQlB,aAAamB,QAAQ,QACjCC,KAAK1B,SAAS,CACZL,SAAW6B,EAAShB,KAAKmB,MAAMrB,aAAamB,QAAQ,SAAW,sCA8D1D,IAAAG,EAAAF,KAIP,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,QAAME,SAAUP,KAAK9B,YAAasC,aAAa,OAC7CL,EAAAC,EAAAC,cAAA,SAAO1B,KAAK,YAAY8B,SAAUT,KAAKhB,YAAa0B,KAAK,OAAOxB,MAAOc,KAAKjC,MAAMC,YAClFmC,EAAAC,EAAAC,cAAA,aAAQL,KAAKjC,MAAMC,YAGrBmC,EAAAC,EAAAC,cAAA,UACML,KAAKjC,MAAME,SAASS,OAAQ,EAAMsB,KAAKjC,MAAME,SAASyB,IAAI,SAACC,GAAD,OAC1DQ,EAAAC,EAAAC,cAAA,MAAIM,IAAKhB,EAAKlB,IACZ0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,aACZP,EAAAC,EAAAC,cAAA,aAAQV,EAAKhB,MACbwB,EAAAC,EAAAC,cAAA,UAAQO,MAAOjB,EAAKlB,GAAIoC,QAAS,SAAC1C,GAAD,OAAO+B,EAAKV,aAAarB,EAAGwB,EAAKlB,MAAlE,aAGF,aA7FAqC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b01d5a57.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    inputList: \"default\",\n    listData : []\n  };\n\n  componentDidMount() {\n    let check = localStorage.getItem(\"data\");\n    this.setState({\n      listData: (check) ? JSON.parse(localStorage.getItem(\"data\")) : []\n    })\n  }\n\n  handlerForm = (e) => {\n    e.preventDefault();\n    //console.log(this.state.inputList);\n    this.setState({inputList: ''});\n\n    let list = this.state.listData;\n    list.push({\n      id: list.length + 1,\n      name: this.state.inputList\n    });\n    \n    this.setState({listData: list});\n\n    localStorage.setItem(\"data\", JSON.stringify(this.state.listData));\n    \n    // this.setState(state => {\n    //   inputList: state.inputList\n    // });\n    // console.log(this.state.inputList);\n    \n  };\n\n  handleInput = e => {\n    this.setState({inputList: e.target.value}); // untuk satuan input\n    console.log(e.target.value);\n  };\n\n  handleMultipleInput = (e) => {\n    this.setState({ [e.target.name] : e.target.value}); // untuk generic input\n  }\n\n  handleDelete = (e, id) => {\n    let list = this.state.listData;\n    let idx = list.map((item) => {\n      return item.id;\n    }).indexOf(id);\n    list.splice(idx, 1);\n    this.setState({listData: list});\n    localStorage.setItem(\"data\", JSON.stringify(this.state.listData));\n    // this.setState(state => {\n    //   listData: state.listData.map(item => \n    //     item.id == e.id ? {} : item\n    //   )\n    // });\n  }\n\n  // Items(props) {\n  //   const numbers = props.numbers;\n  //   const listItems = numbers.map((number) =>\n  //     <li>{number}</li>\n  //   );\n  //   return (\n  //     <ul>{listItems}</ul>\n  //   );\n  // }\n\n\n\n  render() {\n\n    // const angka = [1,2,3];\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form onSubmit={this.handlerForm} autoComplete=\"off\">\n            <input name=\"inputList\" onChange={this.handleInput} type=\"text\" value={this.state.inputList} />\n            <label>{this.state.inputList}</label>\n          </form>\n\n          <ul>\n              {(this.state.listData.length >0 ) ? this.state.listData.map((item) =>\n                <li key={item.id}>\n                  <div>\n                    <input type=\"checkbox\"/>\n                    <label>{item.name}</label>\n                    <button title={item.id} onClick={(e) => this.handleDelete(e, item.id)}>Hapus</button>\n                  </div>\n                </li>\n              ) : ''}\n          </ul>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}